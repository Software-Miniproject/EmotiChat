{"ast":null,"code":"var _jsxFileName = \"/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/components/CreateChatroom.js\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { addDoc, getDocs, collection, serverTimestamp, orderBy, query, limit, where } from \"firebase/firestore\";\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\n// To do: Beautify the chat bubbles, put in CSS for the submission form, add in user PFP\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateChatroom = ({\n  setChatroom\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  const userRef = collection(db, 'users');\n\n  // Asynchronously gather the chatrooms under the current user\n  const getUserChatrooms = async () => {\n    _s();\n    const q = auth.currentUser ? query(userRef, where(\"uid\", \"==\", auth.currentUser.uid)) : '';\n    const [chatrooms, setChatrooms] = useState([]);\n    const user = useCollectionData(q);\n    if (user) {\n      var _user$0$;\n      if (user[0] && (_user$0$ = user[0][0]) !== null && _user$0$ !== void 0 && _user$0$.chatrooms) {\n        setChatrooms(user[0][0].chatrooms);\n      } else {\n        setChatrooms([]);\n      }\n    } else {\n      setChatrooms([]);\n    }\n  };\n  _s(getUserChatrooms, \"9h3ehdxmxg8kN1dPaeEwb3ue06Q=\", false, function () {\n    return [useCollectionData];\n  });\n  useEffect(() => {\n    getUserChatrooms();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: chatrooms.map((chatroom, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setChatroom(chatroom),\n      children: chatroom\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s2(CreateChatroom, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = CreateChatroom;\nexport default CreateChatroom;\nvar _c;\n$RefreshReg$(_c, \"CreateChatroom\");","map":{"version":3,"names":["React","useEffect","useRef","useState","auth","db","addDoc","getDocs","collection","serverTimestamp","orderBy","query","limit","where","useCollectionData","jsxDEV","_jsxDEV","CreateChatroom","setChatroom","_s2","_s","$RefreshSig$","userRef","getUserChatrooms","q","currentUser","uid","chatrooms","setChatrooms","user","_user$0$","children","map","chatroom","index","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/components/CreateChatroom.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { addDoc, getDocs, collection, serverTimestamp, orderBy, query, limit, where } from \"firebase/firestore\";\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\n// To do: Beautify the chat bubbles, put in CSS for the submission form, add in user PFP\n\nconst CreateChatroom = ({ setChatroom }) => {\n    \n    const userRef = collection(db, 'users');\n    \n\n    // Asynchronously gather the chatrooms under the current user\n    const getUserChatrooms = async () => {\n        const q = (auth.currentUser)? query(userRef, where(\"uid\", \"==\", auth.currentUser.uid)) : '';\n        const [chatrooms, setChatrooms] = useState([]);\n        const user = useCollectionData(q);\n        if (user) {\n            if (user[0] && user[0][0]?.chatrooms) {\n                setChatrooms(user[0][0].chatrooms);\n            }\n            else {\n                setChatrooms([]);\n            }\n        }\n        else{\n            setChatrooms([]);\n        }\n        \n    }\n    useEffect(() => {\n        getUserChatrooms();\n    }, []);\n\n\n\n    return (\n        <div>\n            {chatrooms.map((chatroom, index) => (\n                <button key={index} onClick={() => setChatroom(chatroom)}>\n                    {chatroom}\n                </button>\n            ))}\n        </div>\n    );\n\n}\n\nexport default CreateChatroom;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,IAAI,EAAEC,EAAE,QAAQ,aAAa;AACtC,SAASC,MAAM,EAAEC,OAAO,EAAEC,UAAU,EAAEC,eAAe,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,QAAQ,oBAAoB;AAC/G,SAASC,iBAAiB,QAAQ,gCAAgC;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAExC,MAAMC,OAAO,GAAGd,UAAU,CAACH,EAAE,EAAE,OAAO,CAAC;;EAGvC;EACA,MAAMkB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IAAAH,EAAA;IACjC,MAAMI,CAAC,GAAIpB,IAAI,CAACqB,WAAW,GAAGd,KAAK,CAACW,OAAO,EAAET,KAAK,CAAC,KAAK,EAAE,IAAI,EAAET,IAAI,CAACqB,WAAW,CAACC,GAAG,CAAC,CAAC,GAAG,EAAE;IAC3F,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;IAC9C,MAAM0B,IAAI,GAAGf,iBAAiB,CAACU,CAAC,CAAC;IACjC,IAAIK,IAAI,EAAE;MAAA,IAAAC,QAAA;MACN,IAAID,IAAI,CAAC,CAAC,CAAC,KAAAC,QAAA,GAAID,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,cAAAC,QAAA,eAAVA,QAAA,CAAYH,SAAS,EAAE;QAClCC,YAAY,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACF,SAAS,CAAC;MACtC,CAAC,MACI;QACDC,YAAY,CAAC,EAAE,CAAC;MACpB;IACJ,CAAC,MACG;MACAA,YAAY,CAAC,EAAE,CAAC;IACpB;EAEJ,CAAC;EAAAR,EAAA,CAhBKG,gBAAgB;IAAA,QAGLT,iBAAiB;EAAA;EAclCb,SAAS,CAAC,MAAM;IACZsB,gBAAgB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAIN,oBACIP,OAAA;IAAAe,QAAA,EACKJ,SAAS,CAACK,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,kBAC3BlB,OAAA;MAAoBmB,OAAO,EAAEA,CAAA,KAAMjB,WAAW,CAACe,QAAQ,CAAE;MAAAF,QAAA,EACpDE;IAAQ,GADAC,KAAK;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CACX;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAGd,CAAC;AAAApB,GAAA,CAvCKF,cAAc;AAAAuB,EAAA,GAAdvB,cAAc;AAyCpB,eAAeA,cAAc;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}