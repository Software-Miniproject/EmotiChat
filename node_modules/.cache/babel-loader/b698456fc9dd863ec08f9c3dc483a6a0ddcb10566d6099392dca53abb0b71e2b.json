{"ast":null,"code":"var _jsxFileName = \"/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/components/DisplayChatrooms.js\",\n  _s = $RefreshSig$();\nimport '../App.css';\nimport React, { useEffect, useState } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { getDocs, collection, query, where } from \"firebase/firestore\";\nimport { onAuthStateChanged } from \"firebase/auth\";\n\n// To do: Beautify the chat bubbles, put in CSS for the submission form, add in user PFP\n\n// Function that displays the chatrooms the logged in user has access to and sets the current chatroom to what the user clicks\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DisplayChatrooms = ({\n  setChatroom\n}) => {\n  _s();\n  // State setter and value for the chatrooms associated with current user\n  const [chatrooms, setChatrooms] = useState([]);\n\n  // Asynchronously gather the chatrooms under the current user\n  const getUserChatrooms = async () => {\n    // If there is a current user, query firestore \"users\" for the chatrooms associated with user that is currently logged in\n    if (auth.currentUser) {\n      const userRef = collection(db, \"users\");\n      const q = query(userRef, where(\"uid\", \"==\", auth.currentUser.uid));\n      const querySnapshot = await getDocs(q);\n\n      // If the query is successful (not empty), set the chatrooms to the chatrooms array associated with the user\n      if (!querySnapshot.empty) {\n        const userDoc = querySnapshot.docs[0];\n        const userChatrooms = userDoc.data().chatrooms || [];\n        setChatrooms(userChatrooms);\n      } else {\n        setChatrooms([]);\n      }\n    } else {\n      setChatrooms([]);\n    }\n  };\n  // Function that will getUserChatrooms when currentUser is changed\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      if (user) {\n        getUserChatrooms();\n      } else {\n        setChatrooms([]);\n      }\n    });\n    return () => unsubscribe();\n  }, []);\n\n  // Function that grabs the name of the chat given the chatroom id\n  const getChatroomName = async chat_id => {\n    const chatRef = doc(db, \"chats\", chat_id);\n    const chatSnapshot = await getDocs(chatRef);\n    if (chatSnapshot) {\n      const chat_data = chatSnapshot.data();\n      return chat_data.name || chat_id;\n    } else {\n      return chat_id;\n    }\n  };\n  // Returns HTML code that displays buttons corresponding to the chatroom id's, if clicked it will set the chatroom to the selected one\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatrooms_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Chatrooms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }, this), chatrooms.map((chatroom, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setChatroom(chatroom),\n      children: getChatroomName(chatroom)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(DisplayChatrooms, \"P+6xWbp0lEZ22pGZE0VRaJnj8cY=\");\n_c = DisplayChatrooms;\nexport default DisplayChatrooms;\nvar _c;\n$RefreshReg$(_c, \"DisplayChatrooms\");","map":{"version":3,"names":["React","useEffect","useState","auth","db","getDocs","collection","query","where","onAuthStateChanged","jsxDEV","_jsxDEV","DisplayChatrooms","setChatroom","_s","chatrooms","setChatrooms","getUserChatrooms","currentUser","userRef","q","uid","querySnapshot","empty","userDoc","docs","userChatrooms","data","unsubscribe","user","getChatroomName","chat_id","chatRef","doc","chatSnapshot","chat_data","name","className","children","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","map","chatroom","index","onClick","_c","$RefreshReg$"],"sources":["/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/components/DisplayChatrooms.js"],"sourcesContent":["import '../App.css';\nimport React, { useEffect, useState } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { getDocs, collection, query, where } from \"firebase/firestore\";\nimport { onAuthStateChanged } from \"firebase/auth\";\n\n// To do: Beautify the chat bubbles, put in CSS for the submission form, add in user PFP\n\n// Function that displays the chatrooms the logged in user has access to and sets the current chatroom to what the user clicks\nconst DisplayChatrooms = ({ setChatroom }) => {\n    // State setter and value for the chatrooms associated with current user\n    const [chatrooms, setChatrooms] = useState([]);\n    \n    // Asynchronously gather the chatrooms under the current user\n    const getUserChatrooms = async () => {\n        // If there is a current user, query firestore \"users\" for the chatrooms associated with user that is currently logged in\n        if (auth.currentUser) {\n            const userRef = collection(db, \"users\");\n            const q = query(userRef, where(\"uid\", \"==\", auth.currentUser.uid));\n            const querySnapshot = await getDocs(q);\n\n            // If the query is successful (not empty), set the chatrooms to the chatrooms array associated with the user\n            if (!querySnapshot.empty) {\n                const userDoc = querySnapshot.docs[0];\n                const userChatrooms = userDoc.data().chatrooms || [];\n                setChatrooms(userChatrooms);\n            }\n            else{\n                setChatrooms([]);\n            }\n        }\n        else {\n            setChatrooms([]);\n        }     \n    }\n    // Function that will getUserChatrooms when currentUser is changed\n    useEffect(() => {\n        const unsubscribe = onAuthStateChanged(auth, (user) => {\n            if (user) {\n                getUserChatrooms();\n            }\n            else {\n                setChatrooms([]);\n            }\n        });\n        return () => unsubscribe();\n    }, []);\n\n    // Function that grabs the name of the chat given the chatroom id\n    const getChatroomName = async (chat_id) => {\n        const chatRef = doc(db, \"chats\", chat_id);\n        const chatSnapshot = await getDocs(chatRef);\n        if (chatSnapshot) {\n            const chat_data = chatSnapshot.data();\n            return chat_data.name || chat_id;\n        }\n        else {\n            return chat_id;\n        }\n    }\n    // Returns HTML code that displays buttons corresponding to the chatroom id's, if clicked it will set the chatroom to the selected one\n    return (\n        <div className=\"chatrooms_container\">\n          <h3 style={{ textAlign: 'center' }}>Chatrooms</h3>\n          {chatrooms.map((chatroom, index) => (\n            <button key={index} onClick={() => setChatroom(chatroom)}>\n              {getChatroomName(chatroom)}\n            </button>\n          ))}\n        </div>\n      );\n      \n\n}\n\nexport default DisplayChatrooms;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}