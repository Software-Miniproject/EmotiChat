{"ast":null,"code":"var _jsxFileName = \"/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/pages/username.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { db } from '../firebase';\nimport { doc, updateDoc, query, where, getDocs, collection } from 'firebase/firestore';\nimport { UserAuth } from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Username = () => {\n  _s();\n  const [newUsername, setNewUsername] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const {\n    user,\n    setUser\n  } = UserAuth(); // Import setUser from the UserAuth context\n  const [otherUserEmailPrefixes, setOtherUserEmailPrefixes] = useState([]);\n  const [existingUsernames, setExistingUsernames] = useState([]);\n  useEffect(() => {\n    // Query Firestore to get email prefixes of other users\n    const fetchOtherUserEmailPrefixes = async () => {\n      try {\n        const usersCollection = collection(db, 'users');\n        const querySnapshot = await getDocs(usersCollection);\n        const emailPrefixes = querySnapshot.docs.filter(doc => doc.id !== user.uid) // Exclude the current user's document\n        .map(doc => doc.data().email.split('@')[0]);\n        setOtherUserEmailPrefixes(emailPrefixes);\n      } catch (error) {\n        console.error('Error fetching other users:', error);\n      }\n    };\n    const fetchExistingUsernames = async () => {\n      try {\n        const usersCollection = collection(db, 'users');\n        const querySnapshot = await getDocs(usersCollection);\n        const usernames = querySnapshot.docs.map(doc => doc.data().username);\n        setExistingUsernames(usernames);\n      } catch (error) {\n        console.error('Error fetching existing usernames:', error);\n      }\n    };\n    fetchOtherUserEmailPrefixes();\n    fetchExistingUsernames();\n  }, [user.uid]);\n  const handleUsernameChange = e => {\n    const username = e.target.value;\n\n    // Check if the username is valid (contains only letters, numbers, ., and _ and is no longer than 30 characters)\n    const isValidUsername = /^[a-zA-Z0-9._]{3,30}$/.test(username);\n    if (!isValidUsername) {\n      setErrorMessage('Invalid username format. It can only contain letters, numbers, ., and _ and must be 3 to 30 characters long.');\n    } else {\n      setErrorMessage(''); // Clear the error message if the username is valid\n    }\n\n    setNewUsername(username);\n  };\n  const handleSaveUsername = async () => {\n    try {\n      // Validate that the username is not empty\n      if (newUsername.trim() === '') {\n        setErrorMessage('Username cannot be empty');\n        return;\n      }\n\n      // Check if the username is already in use by another user\n      if (existingUsernames.includes(newUsername)) {\n        setErrorMessage('Username is already in use by another user');\n        return;\n      }\n\n      // Check if the username matches any other user's email prefix\n      if (otherUserEmailPrefixes.includes(newUsername)) {\n        setErrorMessage('Username is already in use by another user');\n        return;\n      }\n\n      // Check if the username is valid (contains only letters, numbers, ., and _ and is no longer than 30 characters)\n      const isValidUsername = /^[a-zA-Z0-9._]{3,30}$/.test(newUsername);\n      if (!isValidUsername) {\n        setErrorMessage('Invalid username format. It can only contain letters, numbers, ., and _ and must be 3 to 30 characters long.');\n        return;\n      }\n\n      // Update the username in the Firestore document\n      const uid = user.uid;\n      const userRef = doc(db, 'users', uid);\n      await updateDoc(userRef, {\n        username: newUsername\n      });\n\n      // Update the username property in the user state\n      setUser(prevUser => ({\n        ...prevUser,\n        username: newUsername\n      }));\n      setSuccessMessage('Username updated successfully');\n\n      // Clear success message after 2 seconds\n      setTimeout(() => setSuccessMessage(''), 2000);\n    } catch (error) {\n      console.error('Error updating username:', error);\n      setErrorMessage('Error updating username: ' + error.message); // Include error message in the error state\n\n      // Clear error message after 2 seconds\n      setTimeout(() => setErrorMessage(''), 2000);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Username\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Change Username\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newUsername,\n        onChange: handleUsernameChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSaveUsername,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), successMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"success-message\",\n        children: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 36\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/account\",\n          children: \"My Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n};\n_s(Username, \"KKP/lr1RINawU7RaSee/hueEda8=\");\n_c = Username;\nexport default Username;\nvar _c;\n$RefreshReg$(_c, \"Username\");","map":{"version":3,"names":["React","useState","useEffect","Link","db","doc","updateDoc","query","where","getDocs","collection","UserAuth","jsxDEV","_jsxDEV","Username","_s","newUsername","setNewUsername","successMessage","setSuccessMessage","errorMessage","setErrorMessage","user","setUser","otherUserEmailPrefixes","setOtherUserEmailPrefixes","existingUsernames","setExistingUsernames","fetchOtherUserEmailPrefixes","usersCollection","querySnapshot","emailPrefixes","docs","filter","id","uid","map","data","email","split","error","console","fetchExistingUsernames","usernames","username","handleUsernameChange","e","target","value","isValidUsername","test","handleSaveUsername","trim","includes","userRef","prevUser","setTimeout","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","to","_c","$RefreshReg$"],"sources":["/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/pages/username.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { db } from '../firebase';\nimport { doc, updateDoc, query, where, getDocs, collection } from 'firebase/firestore';\nimport { UserAuth } from '../context/AuthContext';\n\nconst Username = () => {\n    const [newUsername, setNewUsername] = useState('');\n    const [successMessage, setSuccessMessage] = useState('');\n    const [errorMessage, setErrorMessage] = useState('');\n    const { user, setUser } = UserAuth(); // Import setUser from the UserAuth context\n    const [otherUserEmailPrefixes, setOtherUserEmailPrefixes] = useState([]);\n    const [existingUsernames, setExistingUsernames] = useState([]);\n\n    useEffect(() => {\n        // Query Firestore to get email prefixes of other users\n        const fetchOtherUserEmailPrefixes = async () => {\n            try {\n                const usersCollection = collection(db, 'users');\n                const querySnapshot = await getDocs(usersCollection);\n\n                const emailPrefixes = querySnapshot.docs\n                    .filter(doc => doc.id !== user.uid) // Exclude the current user's document\n                    .map(doc => doc.data().email.split('@')[0]);\n\n                setOtherUserEmailPrefixes(emailPrefixes);\n            } catch (error) {\n                console.error('Error fetching other users:', error);\n            }\n        };\n\n        const fetchExistingUsernames = async () => {\n            try {\n                const usersCollection = collection(db, 'users');\n                const querySnapshot = await getDocs(usersCollection);\n\n                const usernames = querySnapshot.docs\n                    .map(doc => doc.data().username);\n\n                setExistingUsernames(usernames);\n            } catch (error) {\n                console.error('Error fetching existing usernames:', error);\n            }\n        };\n\n        fetchOtherUserEmailPrefixes();\n        fetchExistingUsernames();\n    }, [user.uid]);\n\n    const handleUsernameChange = (e) => {\n        const username = e.target.value;\n\n        // Check if the username is valid (contains only letters, numbers, ., and _ and is no longer than 30 characters)\n        const isValidUsername = /^[a-zA-Z0-9._]{3,30}$/.test(username);\n\n        if (!isValidUsername) {\n            setErrorMessage('Invalid username format. It can only contain letters, numbers, ., and _ and must be 3 to 30 characters long.');\n        } else {\n            setErrorMessage(''); // Clear the error message if the username is valid\n        }\n\n        setNewUsername(username);\n    };\n\n    const handleSaveUsername = async () => {\n        try {\n            // Validate that the username is not empty\n            if (newUsername.trim() === '') {\n                setErrorMessage('Username cannot be empty');\n                return;\n            }\n    \n            // Check if the username is already in use by another user\n            if (existingUsernames.includes(newUsername)) {\n                setErrorMessage('Username is already in use by another user');\n                return;\n            }\n    \n            // Check if the username matches any other user's email prefix\n            if (otherUserEmailPrefixes.includes(newUsername)) {\n                setErrorMessage('Username is already in use by another user');\n                return;\n            }\n    \n            // Check if the username is valid (contains only letters, numbers, ., and _ and is no longer than 30 characters)\n            const isValidUsername = /^[a-zA-Z0-9._]{3,30}$/.test(newUsername);\n    \n            if (!isValidUsername) {\n                setErrorMessage('Invalid username format. It can only contain letters, numbers, ., and _ and must be 3 to 30 characters long.');\n                return;\n            }\n    \n            // Update the username in the Firestore document\n            const uid = user.uid;\n            const userRef = doc(db, 'users', uid);\n    \n            await updateDoc(userRef, {\n                username: newUsername\n            });\n    \n            // Update the username property in the user state\n            setUser(prevUser => ({ ...prevUser, username: newUsername }));\n    \n            setSuccessMessage('Username updated successfully');\n    \n            // Clear success message after 2 seconds\n            setTimeout(() => setSuccessMessage(''), 2000);\n        } catch (error) {\n            console.error('Error updating username:', error);\n            setErrorMessage('Error updating username: ' + error.message); // Include error message in the error state\n    \n            // Clear error message after 2 seconds\n            setTimeout(() => setErrorMessage(''), 2000);\n        }\n    };\n    \n\n    return (\n        <div className='Username'>\n            <h1>Change Username</h1>\n            <div>\n                <input\n                    type=\"text\"\n                    value={newUsername}\n                    onChange={handleUsernameChange}\n                />\n                <button onClick={handleSaveUsername}>Save</button>\n                {successMessage && <p className=\"success-message\">{successMessage}</p>}\n                {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n                <p><Link to=\"/account\">My Account</Link></p>\n            </div>\n        </div>\n    );\n};\n\nexport default Username;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}