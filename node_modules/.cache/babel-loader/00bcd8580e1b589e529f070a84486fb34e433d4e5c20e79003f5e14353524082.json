{"ast":null,"code":"var _jsxFileName = \"/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/components/DisplayChatrooms.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { getDocs, collection, query, where } from \"firebase/firestore\";\nimport { onAuthStateChanged } from \"firebase/auth\";\n\n// To do: Beautify the chat bubbles, put in CSS for the submission form, add in user PFP\n\n// Function that displays the chatrooms the logged in user has access to and sets the current chatroom to what the user clicks\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DisplayChatrooms = ({\n  setChatroom\n}) => {\n  _s();\n  // State setter and value for the chatrooms associated with current user\n  const [chatrooms, setChatrooms] = useState([]);\n\n  // Asynchronously gather the chatrooms under the current user\n  const getUserChatrooms = async () => {\n    // If there is a current user, query firestore \"users\" for the chatrooms associated with user that is currently logged in\n    if (auth.currentUser) {\n      const userRef = collection(db, \"users\");\n      const q = query(userRef, where(\"uid\", \"==\", auth.currentUser.uid));\n      const querySnapshot = await getDocs(q);\n\n      // If the query is successful (not empty), set the chatrooms to the chatrooms array associated with the user\n      if (!querySnapshot.empty) {\n        const userDoc = querySnapshot.docs[0];\n        const userChatrooms = userDoc.data().chatrooms || [];\n        setChatrooms(userChatrooms);\n      } else {\n        setChatrooms([]);\n      }\n    } else {\n      setChatrooms([]);\n    }\n  };\n  // Function that will getUserChatrooms when currentUser is changed\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      if (user) {\n        getUserChatrooms();\n      } else {\n        setChatrooms([]);\n      }\n    });\n    return () => unsubscribe();\n  }, []);\n\n  // Returns HTML code that displays buttons corresponding to the chatroom id's, if clicked it will set the chatroom to the selected one\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: chatrooms.map((chatroom, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setChatroom(chatroom),\n        children: chatroom\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Chatroom: \", chatroom]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s(DisplayChatrooms, \"P+6xWbp0lEZ22pGZE0VRaJnj8cY=\");\n_c = DisplayChatrooms;\nexport default DisplayChatrooms;\nvar _c;\n$RefreshReg$(_c, \"DisplayChatrooms\");","map":{"version":3,"names":["React","useEffect","useState","auth","db","getDocs","collection","query","where","onAuthStateChanged","jsxDEV","_jsxDEV","Fragment","_Fragment","DisplayChatrooms","setChatroom","_s","chatrooms","setChatrooms","getUserChatrooms","currentUser","userRef","q","uid","querySnapshot","empty","userDoc","docs","userChatrooms","data","unsubscribe","user","children","map","chatroom","index","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/components/DisplayChatrooms.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { getDocs, collection, query, where } from \"firebase/firestore\";\nimport { onAuthStateChanged } from \"firebase/auth\";\n\n// To do: Beautify the chat bubbles, put in CSS for the submission form, add in user PFP\n\n// Function that displays the chatrooms the logged in user has access to and sets the current chatroom to what the user clicks\nconst DisplayChatrooms = ({ setChatroom }) => {\n    // State setter and value for the chatrooms associated with current user\n    const [chatrooms, setChatrooms] = useState([]);\n    \n    // Asynchronously gather the chatrooms under the current user\n    const getUserChatrooms = async () => {\n        // If there is a current user, query firestore \"users\" for the chatrooms associated with user that is currently logged in\n        if (auth.currentUser) {\n            const userRef = collection(db, \"users\");\n            const q = query(userRef, where(\"uid\", \"==\", auth.currentUser.uid));\n            const querySnapshot = await getDocs(q);\n\n            // If the query is successful (not empty), set the chatrooms to the chatrooms array associated with the user\n            if (!querySnapshot.empty) {\n                const userDoc = querySnapshot.docs[0];\n                const userChatrooms = userDoc.data().chatrooms || [];\n                setChatrooms(userChatrooms);\n            }\n            else{\n                setChatrooms([]);\n            }\n        }\n        else {\n            setChatrooms([]);\n        }     \n    }\n    // Function that will getUserChatrooms when currentUser is changed\n    useEffect(() => {\n        const unsubscribe = onAuthStateChanged(auth, (user) => {\n            if (user) {\n                getUserChatrooms();\n            }\n            else {\n                setChatrooms([]);\n            }\n        });\n        return () => unsubscribe();\n    }, []);\n\n\n    // Returns HTML code that displays buttons corresponding to the chatroom id's, if clicked it will set the chatroom to the selected one\n    return (\n        <div>\n            {chatrooms.map((chatroom, index) => (\n                <>\n                    <button key={index} onClick={() => setChatroom(chatroom)}>\n                        {chatroom}\n                    </button>\n                    <p>Chatroom: {chatroom}</p>\n                </>\n            ))}\n        </div>\n    );\n\n}\n\nexport default DisplayChatrooms;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,EAAEC,EAAE,QAAQ,aAAa;AACtC,SAASC,OAAO,EAAEC,UAAU,EAAEC,KAAK,EAAEC,KAAK,QAAQ,oBAAoB;AACtE,SAASC,kBAAkB,QAAQ,eAAe;;AAElD;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAC1C;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACA,MAAMiB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACjC;IACA,IAAIhB,IAAI,CAACiB,WAAW,EAAE;MAClB,MAAMC,OAAO,GAAGf,UAAU,CAACF,EAAE,EAAE,OAAO,CAAC;MACvC,MAAMkB,CAAC,GAAGf,KAAK,CAACc,OAAO,EAAEb,KAAK,CAAC,KAAK,EAAE,IAAI,EAAEL,IAAI,CAACiB,WAAW,CAACG,GAAG,CAAC,CAAC;MAClE,MAAMC,aAAa,GAAG,MAAMnB,OAAO,CAACiB,CAAC,CAAC;;MAEtC;MACA,IAAI,CAACE,aAAa,CAACC,KAAK,EAAE;QACtB,MAAMC,OAAO,GAAGF,aAAa,CAACG,IAAI,CAAC,CAAC,CAAC;QACrC,MAAMC,aAAa,GAAGF,OAAO,CAACG,IAAI,CAAC,CAAC,CAACZ,SAAS,IAAI,EAAE;QACpDC,YAAY,CAACU,aAAa,CAAC;MAC/B,CAAC,MACG;QACAV,YAAY,CAAC,EAAE,CAAC;MACpB;IACJ,CAAC,MACI;MACDA,YAAY,CAAC,EAAE,CAAC;IACpB;EACJ,CAAC;EACD;EACAjB,SAAS,CAAC,MAAM;IACZ,MAAM6B,WAAW,GAAGrB,kBAAkB,CAACN,IAAI,EAAG4B,IAAI,IAAK;MACnD,IAAIA,IAAI,EAAE;QACNZ,gBAAgB,CAAC,CAAC;MACtB,CAAC,MACI;QACDD,YAAY,CAAC,EAAE,CAAC;MACpB;IACJ,CAAC,CAAC;IACF,OAAO,MAAMY,WAAW,CAAC,CAAC;EAC9B,CAAC,EAAE,EAAE,CAAC;;EAGN;EACA,oBACInB,OAAA;IAAAqB,QAAA,EACKf,SAAS,CAACgB,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,kBAC3BxB,OAAA,CAAAE,SAAA;MAAAmB,QAAA,gBACIrB,OAAA;QAAoByB,OAAO,EAAEA,CAAA,KAAMrB,WAAW,CAACmB,QAAQ,CAAE;QAAAF,QAAA,EACpDE;MAAQ,GADAC,KAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CAAC,eACT7B,OAAA;QAAAqB,QAAA,GAAG,YAAU,EAACE,QAAQ;MAAA;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,eAC7B,CACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAGd,CAAC;AAAAxB,EAAA,CAtDKF,gBAAgB;AAAA2B,EAAA,GAAhB3B,gBAAgB;AAwDtB,eAAeA,gBAAgB;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}