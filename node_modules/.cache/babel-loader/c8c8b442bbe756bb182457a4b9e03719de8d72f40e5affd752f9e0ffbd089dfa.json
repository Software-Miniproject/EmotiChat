{"ast":null,"code":"var _jsxFileName = \"/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/pages/test.js\",\n  _s = $RefreshSig$();\nimport NavBar from \"../components/Navbar\";\nimport SendMsg from \"../components/SendMsg\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { addDoc, getDocs, collection, serverTimestamp, orderBy, query, limit, where } from \"firebase/firestore\";\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\n// To do: Beautify the chat bubbles, put in CSS for the submission form, add in user PFP\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateChatroom = () => {\n  _s();\n  const userRef = collection(db, 'users');\n  const q = query(userRef, where(\"uid\", \"==\", auth.currentUser.uid));\n  const [chatrooms, setChatrooms] = useState([]);\n  const user = useCollectionData(q);\n\n  // Asynchronously gather the chatrooms under the current user\n  const getUserChatrooms = async () => {\n    var _user$0$;\n    if (user && user.length > 0 && (_user$0$ = user[0][0]) !== null && _user$0$ !== void 0 && _user$0$.chatrooms) {\n      setChatrooms(user[0][0].chatrooms);\n    } else {\n      setChatrooms([]);\n    }\n  };\n  useEffect(() => {\n    getUserChatrooms();\n  }, []);\n  const [selectedChatroom, setSelectedChatroom] = useState(null);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [chatrooms.map((chatroom, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setSelectedChatroom(chatroom),\n      children: chatroom\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this)), selectedChatroom && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Selected Chatroom: \", selectedChatroom]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_s(CreateChatroom, \"ducpD9psL4gz8u6OXJnirOorG8Y=\", false, function () {\n  return [useCollectionData];\n});\n_c = CreateChatroom;\nconst test = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CreateChatroom, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SendMsg, {\n      chat_id: \"1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\nexport default test;\nvar _c;\n$RefreshReg$(_c, \"CreateChatroom\");","map":{"version":3,"names":["NavBar","SendMsg","React","useEffect","useRef","useState","auth","db","addDoc","getDocs","collection","serverTimestamp","orderBy","query","limit","where","useCollectionData","jsxDEV","_jsxDEV","CreateChatroom","_s","userRef","q","currentUser","uid","chatrooms","setChatrooms","user","getUserChatrooms","_user$0$","length","selectedChatroom","setSelectedChatroom","children","map","chatroom","index","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","test","className","chat_id","$RefreshReg$"],"sources":["/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/pages/test.js"],"sourcesContent":["import NavBar from \"../components/Navbar\";\nimport SendMsg from \"../components/SendMsg\";\n\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { addDoc, getDocs, collection, serverTimestamp, orderBy, query, limit, where } from \"firebase/firestore\";\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\n// To do: Beautify the chat bubbles, put in CSS for the submission form, add in user PFP\n\nconst CreateChatroom = () => {\n    const userRef = collection(db, 'users');\n    const q = query(userRef, where(\"uid\", \"==\", auth.currentUser.uid));\n    const [chatrooms, setChatrooms] = useState([]);\n    const user = useCollectionData(q);\n    \n\n    // Asynchronously gather the chatrooms under the current user\n    const getUserChatrooms = async () => {\n        if (user && user.length > 0 && user[0][0]?.chatrooms) {\n            setChatrooms(user[0][0].chatrooms);\n        }\n        else{\n            setChatrooms([]);\n        }\n        \n    }\n    useEffect(() => {\n        getUserChatrooms();\n    }, []);\n\n    const [selectedChatroom, setSelectedChatroom] = useState(null);\n\n    return (\n        <div>\n            {chatrooms.map((chatroom, index) => (\n                <button key={index} onClick={() => setSelectedChatroom(chatroom)}>\n                    {chatroom}\n                </button>\n            ))}\n            \n            {selectedChatroom && (\n                <div>Selected Chatroom: {selectedChatroom}</div>\n            )}\n        </div>\n    );\n\n}\n\nconst test = () => {\n\n\n    return (\n        <div className=\"App\">\n            <NavBar/>\n            <CreateChatroom/>\n            <SendMsg chat_id={\"1\"}/>\n        </div>\n    )\n}\nexport default test;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}