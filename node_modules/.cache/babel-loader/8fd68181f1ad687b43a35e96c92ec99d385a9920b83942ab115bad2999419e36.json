{"ast":null,"code":"var _jsxFileName = \"/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/components/SendMsg.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { addDoc, collection, idField, serverTimestamp, orderBy } from \"firebase/firestore\";\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst chatroom = () => {\n  _s();\n  const dummy = useRef();\n  const messagesRef = collection(db, \"messages\");\n  // Query for the 25 more recent messages\n  const query = messagesRef.orderBy('timestamp').limit(25);\n  const [messages] = useCollectionData(query, {\n    idField: 'id'\n  });\n  const [formValue, setFormValue] = useState('');\n\n  // Asynchronous function that will send messages using the value of the inputted text\n  const sendMsg = async e => {\n    e.preventDefault();\n    const {\n      uid,\n      photoURL\n    } = auth.currentUser;\n    await messagesRef.add({\n      message: formValue,\n      timestamp: serverTimestamp(),\n      sender_id: uid\n    });\n    setFormValue('');\n    dummy.current.scrollIntoView({\n      behavior: 'smooth '\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"main\", {\n      children: [messages && messages.map(msg => /*#__PURE__*/_jsxDEV(ChatMessage, {\n        message: msg\n      }, msg.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 46\n      }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n        ref: dummy\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMsg,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: formValue,\n        onChange: e => setFormValue(e.target.value),\n        placeholder: \"hehe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !formValue,\n        children: \"send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(chatroom, \"NX0eAKMykrgqWBRdNpM7iVcnAm4=\", false, function () {\n  return [useCollectionData];\n});\nexport default chatroom;","map":{"version":3,"names":["React","useRef","useState","auth","db","addDoc","collection","idField","serverTimestamp","orderBy","useCollectionData","jsxDEV","_jsxDEV","Fragment","_Fragment","chatroom","_s","dummy","messagesRef","query","limit","messages","formValue","setFormValue","sendMsg","e","preventDefault","uid","photoURL","currentUser","add","message","timestamp","sender_id","current","scrollIntoView","behavior","children","map","msg","ChatMessage","id","fileName","_jsxFileName","lineNumber","columnNumber","ref","onSubmit","value","onChange","target","placeholder","type","disabled"],"sources":["/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/components/SendMsg.js"],"sourcesContent":["\n\nimport React, { useRef, useState } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { addDoc, collection, idField, serverTimestamp, orderBy } from \"firebase/firestore\";\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nconst chatroom = () => {\n    const dummy = useRef();\n    const messagesRef = collection(db, \"messages\");\n    // Query for the 25 more recent messages\n    const query = messagesRef.orderBy('timestamp').limit(25);\n\n    const [messages] = useCollectionData(query, {idField: 'id'});\n\n    const [formValue, setFormValue] = useState('');\n\n    // Asynchronous function that will send messages using the value of the inputted text\n    const sendMsg = async(e) => {\n        e.preventDefault();\n        const {uid, photoURL} = auth.currentUser;\n        await messagesRef.add({\n            message: formValue,\n            timestamp: serverTimestamp(),\n            sender_id: uid,\n        })\n\n        setFormValue('');\n        dummy.current.scrollIntoView({ behavior: 'smooth '});\n    }\n\n    return (\n        <>\n        <main>\n            {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg}/>)}\n            <span ref={dummy}></span>\n        </main>\n        <form onSubmit={sendMsg}>\n            <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"hehe\"/>\n            <button type=\"submit\" disabled={!formValue}>send</button>\n        </form>\n            \n        </>\n    );\n\n}\n\nexport default chatroom;"],"mappings":";;AAEA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,SAASC,IAAI,EAAEC,EAAE,QAAQ,aAAa;AACtC,SAASC,MAAM,EAAEC,UAAU,EAAEC,OAAO,EAAEC,eAAe,EAAEC,OAAO,QAAQ,oBAAoB;AAC1F,SAASC,iBAAiB,QAAQ,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEnE,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAMC,KAAK,GAAGhB,MAAM,CAAC,CAAC;EACtB,MAAMiB,WAAW,GAAGZ,UAAU,CAACF,EAAE,EAAE,UAAU,CAAC;EAC9C;EACA,MAAMe,KAAK,GAAGD,WAAW,CAACT,OAAO,CAAC,WAAW,CAAC,CAACW,KAAK,CAAC,EAAE,CAAC;EAExD,MAAM,CAACC,QAAQ,CAAC,GAAGX,iBAAiB,CAACS,KAAK,EAAE;IAACZ,OAAO,EAAE;EAAI,CAAC,CAAC;EAE5D,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACA,MAAMsB,OAAO,GAAG,MAAMC,CAAC,IAAK;IACxBA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,MAAM;MAACC,GAAG;MAAEC;IAAQ,CAAC,GAAGzB,IAAI,CAAC0B,WAAW;IACxC,MAAMX,WAAW,CAACY,GAAG,CAAC;MAClBC,OAAO,EAAET,SAAS;MAClBU,SAAS,EAAExB,eAAe,CAAC,CAAC;MAC5ByB,SAAS,EAAEN;IACf,CAAC,CAAC;IAEFJ,YAAY,CAAC,EAAE,CAAC;IAChBN,KAAK,CAACiB,OAAO,CAACC,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EACxD,CAAC;EAED,oBACIxB,OAAA,CAAAE,SAAA;IAAAuB,QAAA,gBACAzB,OAAA;MAAAyB,QAAA,GACKhB,QAAQ,IAAIA,QAAQ,CAACiB,GAAG,CAACC,GAAG,iBAAI3B,OAAA,CAAC4B,WAAW;QAAcT,OAAO,EAAEQ;MAAI,GAArBA,GAAG,CAACE,EAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAgB,CAAC,CAAC,eAC3EjC,OAAA;QAAMkC,GAAG,EAAE7B;MAAM;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC,eACPjC,OAAA;MAAMmC,QAAQ,EAAEvB,OAAQ;MAAAa,QAAA,gBACpBzB,OAAA;QAAOoC,KAAK,EAAE1B,SAAU;QAAC2B,QAAQ,EAAGxB,CAAC,IAAKF,YAAY,CAACE,CAAC,CAACyB,MAAM,CAACF,KAAK,CAAE;QAACG,WAAW,EAAC;MAAM;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eAC5FjC,OAAA;QAAQwC,IAAI,EAAC,QAAQ;QAACC,QAAQ,EAAE,CAAC/B,SAAU;QAAAe,QAAA,EAAC;MAAI;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvD,CAAC;EAAA,eAEL,CAAC;AAGX,CAAC;AAAA7B,EAAA,CAtCKD,QAAQ;EAAA,QAMSL,iBAAiB;AAAA;AAkCxC,eAAeK,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}