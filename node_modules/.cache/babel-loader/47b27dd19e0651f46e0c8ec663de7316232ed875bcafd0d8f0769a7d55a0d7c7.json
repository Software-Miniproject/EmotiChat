{"ast":null,"code":"var _jsxFileName = \"/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/components/SendMsg.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { addDoc, collection, serverTimestamp, orderBy, query, limit, where } from \"firebase/firestore\";\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\n// To do: Beautify the chat bubbles, put in CSS for the submission form, add in user PFP\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chatroom = props => {\n  _s();\n  if (props) {\n    const chat_id = props.chat_id;\n    const dummy = useRef();\n    const messagesRef = collection(db, \"messages\");\n\n    // Query for the 25 more recent messages in the current chatroom (requires the 2 filters because can't have where and orderBy in the same)\n    const q = query(messagesRef, where(\"chatroom_id\", \"==\", chat_id), orderBy(\"timestamp\"), limit(25));\n    const [messages] = useCollectionData(q);\n    const [formValue, setFormValue] = useState('');\n\n    // Asynchronous function that will send messages using the value of the inputted text\n    const sendMsg = async e => {\n      if (auth.currentUser) {\n        e.preventDefault();\n        const {\n          uid,\n          photoURL\n        } = auth.currentUser;\n        await addDoc(messagesRef, {\n          message: formValue,\n          timestamp: serverTimestamp(),\n          sender_id: uid,\n          chatroom_id: chat_id\n        });\n      }\n      setFormValue('');\n      dummy.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    };\n    if (auth.currentUser) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"main\", {\n          children: [messages && messages.map(msg => /*#__PURE__*/_jsxDEV(ChatMessage, {\n            message: msg\n          }, msg.sender_id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 54\n          }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n            ref: dummy\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"input_bar\",\n          onSubmit: sendMsg,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            value: formValue,\n            onChange: e => setFormValue(e.target.value),\n            placeholder: \"hehe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            disabled: !formValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true);\n    }\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this);\n  }\n};\n\n// Function for displaying the chat messages in the chatroom\n_s(Chatroom, \"NX0eAKMykrgqWBRdNpM7iVcnAm4=\", false, function () {\n  return [useCollectionData];\n});\n_c = Chatroom;\nconst ChatMessage = props => {\n  // Grab the message text and sender's id for the message\n  const {\n    message,\n    sender_id\n  } = props.message;\n  const messageClass = sender_id === auth.currentUser.uid ? 'sent' : 'received';\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `message ${messageClass}`,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_c2 = ChatMessage;\nexport default Chatroom;\nvar _c, _c2;\n$RefreshReg$(_c, \"Chatroom\");\n$RefreshReg$(_c2, \"ChatMessage\");","map":{"version":3,"names":["React","useRef","useState","auth","db","addDoc","collection","serverTimestamp","orderBy","query","limit","where","useCollectionData","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatroom","props","_s","chat_id","dummy","messagesRef","q","messages","formValue","setFormValue","sendMsg","e","currentUser","preventDefault","uid","photoURL","message","timestamp","sender_id","chatroom_id","current","scrollIntoView","behavior","children","map","msg","ChatMessage","fileName","_jsxFileName","lineNumber","columnNumber","ref","className","onSubmit","value","onChange","target","placeholder","type","disabled","_c","messageClass","_c2","$RefreshReg$"],"sources":["/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/components/SendMsg.js"],"sourcesContent":["\n\nimport React, { useRef, useState } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { addDoc, collection, serverTimestamp, orderBy, query, limit, where } from \"firebase/firestore\";\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\n// To do: Beautify the chat bubbles, put in CSS for the submission form, add in user PFP\n\nconst Chatroom = (props) => {\n    if (props) {\n        const chat_id = props.chat_id;\n        const dummy = useRef();\n        const messagesRef = collection(db, \"messages\");\n        \n        // Query for the 25 more recent messages in the current chatroom (requires the 2 filters because can't have where and orderBy in the same)\n        const q = query(messagesRef, where(\"chatroom_id\", \"==\", chat_id), orderBy(\"timestamp\"), limit(25));\n        const [messages] = useCollectionData(q);\n\n        const [formValue, setFormValue] = useState('');\n\n        // Asynchronous function that will send messages using the value of the inputted text\n        const sendMsg = async(e) => {\n            if (auth.currentUser) {\n                e.preventDefault();\n                const {uid, photoURL} = auth.currentUser;\n                await addDoc(messagesRef, {\n                    message: formValue,\n                    timestamp: serverTimestamp(),\n                    sender_id: uid,\n                    chatroom_id: chat_id\n                })\n            }\n\n            setFormValue('');\n            dummy.current.scrollIntoView({ behavior: 'smooth'});\n        }\n\n        if (auth.currentUser) {\n            return (\n                <>\n                <main>\n                    {messages && messages.map(msg => <ChatMessage key={msg.sender_id} message={msg}/>)}\n                    <span ref={dummy}></span>\n                </main>\n                <form className=\"input_bar\" onSubmit={sendMsg}>\n                    <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"hehe\"/>\n                    <button type=\"submit\" disabled={!formValue}>send</button>\n                </form>       \n                </>\n            );\n        }\n    }\n    else {\n        return (<div></div>)\n    }\n\n}\n\n// Function for displaying the chat messages in the chatroom\nconst ChatMessage = (props) => {\n    // Grab the message text and sender's id for the message\n    const { message, sender_id } = props.message;\n    const messageClass = sender_id === auth.currentUser.uid ? 'sent' : 'received';\n\n    return (\n        <>\n            <div className={`message ${messageClass}`}>\n                <p>{message}</p>\n            </div>\n        </>\n    )\n}\n\nexport default Chatroom;"],"mappings":";;AAEA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,SAASC,IAAI,EAAEC,EAAE,QAAQ,aAAa;AACtC,SAASC,MAAM,EAAEC,UAAU,EAAEC,eAAe,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,QAAQ,oBAAoB;AACtG,SAASC,iBAAiB,QAAQ,gCAAgC;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEA,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACxB,IAAID,KAAK,EAAE;IACP,MAAME,OAAO,GAAGF,KAAK,CAACE,OAAO;IAC7B,MAAMC,KAAK,GAAGpB,MAAM,CAAC,CAAC;IACtB,MAAMqB,WAAW,GAAGhB,UAAU,CAACF,EAAE,EAAE,UAAU,CAAC;;IAE9C;IACA,MAAMmB,CAAC,GAAGd,KAAK,CAACa,WAAW,EAAEX,KAAK,CAAC,aAAa,EAAE,IAAI,EAAES,OAAO,CAAC,EAAEZ,OAAO,CAAC,WAAW,CAAC,EAAEE,KAAK,CAAC,EAAE,CAAC,CAAC;IAClG,MAAM,CAACc,QAAQ,CAAC,GAAGZ,iBAAiB,CAACW,CAAC,CAAC;IAEvC,MAAM,CAACE,SAAS,EAAEC,YAAY,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;;IAE9C;IACA,MAAMyB,OAAO,GAAG,MAAMC,CAAC,IAAK;MACxB,IAAIzB,IAAI,CAAC0B,WAAW,EAAE;QAClBD,CAAC,CAACE,cAAc,CAAC,CAAC;QAClB,MAAM;UAACC,GAAG;UAAEC;QAAQ,CAAC,GAAG7B,IAAI,CAAC0B,WAAW;QACxC,MAAMxB,MAAM,CAACiB,WAAW,EAAE;UACtBW,OAAO,EAAER,SAAS;UAClBS,SAAS,EAAE3B,eAAe,CAAC,CAAC;UAC5B4B,SAAS,EAAEJ,GAAG;UACdK,WAAW,EAAEhB;QACjB,CAAC,CAAC;MACN;MAEAM,YAAY,CAAC,EAAE,CAAC;MAChBL,KAAK,CAACgB,OAAO,CAACC,cAAc,CAAC;QAAEC,QAAQ,EAAE;MAAQ,CAAC,CAAC;IACvD,CAAC;IAED,IAAIpC,IAAI,CAAC0B,WAAW,EAAE;MAClB,oBACIf,OAAA,CAAAE,SAAA;QAAAwB,QAAA,gBACA1B,OAAA;UAAA0B,QAAA,GACKhB,QAAQ,IAAIA,QAAQ,CAACiB,GAAG,CAACC,GAAG,iBAAI5B,OAAA,CAAC6B,WAAW;YAAqBV,OAAO,EAAES;UAAI,GAA5BA,GAAG,CAACP,SAAS;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAgB,CAAC,CAAC,eAClFjC,OAAA;YAAMkC,GAAG,EAAE3B;UAAM;YAAAuB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB,CAAC,eACPjC,OAAA;UAAMmC,SAAS,EAAC,WAAW;UAACC,QAAQ,EAAEvB,OAAQ;UAAAa,QAAA,gBAC1C1B,OAAA;YAAOqC,KAAK,EAAE1B,SAAU;YAAC2B,QAAQ,EAAGxB,CAAC,IAAKF,YAAY,CAACE,CAAC,CAACyB,MAAM,CAACF,KAAK,CAAE;YAACG,WAAW,EAAC;UAAM;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC,CAAC,eAC5FjC,OAAA;YAAQyC,IAAI,EAAC,QAAQ;YAACC,QAAQ,EAAE,CAAC/B,SAAU;YAAAe,QAAA,EAAC;UAAI;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvD,CAAC;MAAA,eACL,CAAC;IAEX;EACJ,CAAC,MACI;IACD,oBAAQjC,OAAA;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAU,CAAC;EACvB;AAEJ,CAAC;;AAED;AAAA5B,EAAA,CAlDMF,QAAQ;EAAA,QAQaL,iBAAiB;AAAA;AAAA6C,EAAA,GARtCxC,QAAQ;AAmDd,MAAM0B,WAAW,GAAIzB,KAAK,IAAK;EAC3B;EACA,MAAM;IAAEe,OAAO;IAAEE;EAAU,CAAC,GAAGjB,KAAK,CAACe,OAAO;EAC5C,MAAMyB,YAAY,GAAGvB,SAAS,KAAKhC,IAAI,CAAC0B,WAAW,CAACE,GAAG,GAAG,MAAM,GAAG,UAAU;EAE7E,oBACIjB,OAAA,CAAAE,SAAA;IAAAwB,QAAA,eACI1B,OAAA;MAAKmC,SAAS,EAAG,WAAUS,YAAa,EAAE;MAAAlB,QAAA,eACtC1B,OAAA;QAAA0B,QAAA,EAAIP;MAAO;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACf;EAAC,gBACR,CAAC;AAEX,CAAC;AAAAY,GAAA,GAZKhB,WAAW;AAcjB,eAAe1B,QAAQ;AAAC,IAAAwC,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}