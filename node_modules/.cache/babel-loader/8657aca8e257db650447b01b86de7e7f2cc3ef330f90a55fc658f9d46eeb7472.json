{"ast":null,"code":"var _jsxFileName = \"/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/components/CreateChatroom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { getDocs, doc, collection, serverTimestamp, orderBy, query, limit, where } from \"firebase/firestore\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\n// To do: Beautify the chat bubbles, put in CSS for the submission form, add in user PFP\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateChatroom = ({\n  setChatroom\n}) => {\n  _s();\n  const [chatrooms, setChatrooms] = useState([]);\n\n  // Asynchronously gather the chatrooms under the current user\n  const getUserChatrooms = async () => {\n    // If there is a current user, display the \n    if (auth.currentUser) {\n      const userRef = collection(db, \"users\");\n      const q = query(userRef, where(\"uid\", \"==\", auth.currentUser.uid));\n      const querySnapshot = await getDocs(q);\n      if (!querySnapshot.empty) {\n        const userDoc = querySnapshot.docs[0];\n        const userChatrooms = userDoc.data().chatrooms || [];\n        setChatrooms(userChatrooms);\n      } else {\n        setChatrooms([]);\n      }\n    } else {\n      setChatrooms([]);\n    }\n  };\n  useEffect(() => {\n    const unsubscribe = getUserChatrooms();\n  }, [auth.currentUser]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: chatrooms.map((chatroom, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setChatroom(chatroom),\n      children: chatroom\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(CreateChatroom, \"P+6xWbp0lEZ22pGZE0VRaJnj8cY=\");\n_c = CreateChatroom;\nexport default CreateChatroom;\nvar _c;\n$RefreshReg$(_c, \"CreateChatroom\");","map":{"version":3,"names":["React","useEffect","useRef","useState","auth","db","getDocs","doc","collection","serverTimestamp","orderBy","query","limit","where","onAuthStateChanged","useCollectionData","jsxDEV","_jsxDEV","CreateChatroom","setChatroom","_s","chatrooms","setChatrooms","getUserChatrooms","currentUser","userRef","q","uid","querySnapshot","empty","userDoc","docs","userChatrooms","data","unsubscribe","children","map","chatroom","index","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/components/CreateChatroom.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { getDocs, doc, collection, serverTimestamp, orderBy, query, limit, where } from \"firebase/firestore\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\n// To do: Beautify the chat bubbles, put in CSS for the submission form, add in user PFP\n\nconst CreateChatroom = ({ setChatroom }) => {\n\n    const [chatrooms, setChatrooms] = useState([]);\n    \n    // Asynchronously gather the chatrooms under the current user\n    const getUserChatrooms = async () => {\n        // If there is a current user, display the \n        if (auth.currentUser) {\n            const userRef = collection(db, \"users\");\n            const q = query(userRef, where(\"uid\", \"==\", auth.currentUser.uid));\n            const querySnapshot = await getDocs(q);\n\n            if (!querySnapshot.empty) {\n                const userDoc = querySnapshot.docs[0];\n                const userChatrooms = userDoc.data().chatrooms || [];\n                setChatrooms(userChatrooms);\n            }\n            else{\n                setChatrooms([]);\n            }\n        }\n        else {\n            setChatrooms([]);\n        }     \n    }\n    useEffect(() => {\n        const unsubscribe = \n        getUserChatrooms(); \n    }, [auth.currentUser]);\n\n\n\n    return (\n        <div>\n            {chatrooms.map((chatroom, index) => (\n                <button key={index} onClick={() => setChatroom(chatroom)}>\n                    {chatroom}\n                </button>\n            ))}\n        </div>\n    );\n\n}\n\nexport default CreateChatroom;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,IAAI,EAAEC,EAAE,QAAQ,aAAa;AACtC,SAASC,OAAO,EAAEC,GAAG,EAAEC,UAAU,EAAEC,eAAe,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,QAAQ,oBAAoB;AAC5G,SAASC,kBAAkB,QAAQ,eAAe;AAClD,SAASC,iBAAiB,QAAQ,gCAAgC;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAExC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACA,MAAMoB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACjC;IACA,IAAInB,IAAI,CAACoB,WAAW,EAAE;MAClB,MAAMC,OAAO,GAAGjB,UAAU,CAACH,EAAE,EAAE,OAAO,CAAC;MACvC,MAAMqB,CAAC,GAAGf,KAAK,CAACc,OAAO,EAAEZ,KAAK,CAAC,KAAK,EAAE,IAAI,EAAET,IAAI,CAACoB,WAAW,CAACG,GAAG,CAAC,CAAC;MAClE,MAAMC,aAAa,GAAG,MAAMtB,OAAO,CAACoB,CAAC,CAAC;MAEtC,IAAI,CAACE,aAAa,CAACC,KAAK,EAAE;QACtB,MAAMC,OAAO,GAAGF,aAAa,CAACG,IAAI,CAAC,CAAC,CAAC;QACrC,MAAMC,aAAa,GAAGF,OAAO,CAACG,IAAI,CAAC,CAAC,CAACZ,SAAS,IAAI,EAAE;QACpDC,YAAY,CAACU,aAAa,CAAC;MAC/B,CAAC,MACG;QACAV,YAAY,CAAC,EAAE,CAAC;MACpB;IACJ,CAAC,MACI;MACDA,YAAY,CAAC,EAAE,CAAC;IACpB;EACJ,CAAC;EACDrB,SAAS,CAAC,MAAM;IACZ,MAAMiC,WAAW,GACjBX,gBAAgB,CAAC,CAAC;EACtB,CAAC,EAAE,CAACnB,IAAI,CAACoB,WAAW,CAAC,CAAC;EAItB,oBACIP,OAAA;IAAAkB,QAAA,EACKd,SAAS,CAACe,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,kBAC3BrB,OAAA;MAAoBsB,OAAO,EAAEA,CAAA,KAAMpB,WAAW,CAACkB,QAAQ,CAAE;MAAAF,QAAA,EACpDE;IAAQ,GADAC,KAAK;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CACX;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAGd,CAAC;AAAAvB,EAAA,CA1CKF,cAAc;AAAA0B,EAAA,GAAd1B,cAAc;AA4CpB,eAAeA,cAAc;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}