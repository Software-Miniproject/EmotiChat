{"ast":null,"code":"var _jsxFileName = \"/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/components/SendMsg.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { addDoc, collection, serverTimestamp, orderBy, query, limit, where } from \"firebase/firestore\";\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chatroom = props => {\n  _s();\n  const chat_id = props.chat_id;\n  const dummy = useRef();\n  const messagesRef = collection(db, \"messages\");\n\n  // Query for the 25 more recent messages in the current chatroom (requires the 2 filters because can't have where and orderBy in the same)\n  const q = query(messagesRef, where(\"chatroom_id\", \"==\", chat_id), orderBy(\"timestamp\"));\n  const [messages] = useCollectionData(q);\n  const [formValue, setFormValue] = useState('');\n\n  // Asynchronous function that will send messages using the value of the inputted text\n  const sendMsg = async e => {\n    e.preventDefault();\n    const {\n      uid,\n      photoURL\n    } = auth.currentUser;\n    await addDoc(messagesRef, {\n      message: formValue,\n      timestamp: serverTimestamp(),\n      sender_id: uid,\n      chatroom_id: chat_id\n    });\n    setFormValue('');\n    dummy.current.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  if (!messages || messages.length === 0) {\n    // Log a message or perform any necessary actions.\n    console.log(\"No messages found.\");\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"main\", {\n      children: [messages && messages.map(msg => /*#__PURE__*/_jsxDEV(ChatMessage, {\n        message: msg\n      }, msg.sender_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 46\n      }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n        ref: dummy\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"input_bar\",\n      onSubmit: sendMsg,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: formValue,\n        onChange: e => setFormValue(e.target.value),\n        placeholder: \"hehe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !formValue,\n        children: \"send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n// Function for displaying the chat messages in the chatroom\n_s(Chatroom, \"NX0eAKMykrgqWBRdNpM7iVcnAm4=\", false, function () {\n  return [useCollectionData];\n});\n_c = Chatroom;\nconst ChatMessage = props => {\n  // Grab the message text and sender's id for the message\n  const {\n    message,\n    sender_id\n  } = props.message;\n  const messageClass = sender_id === auth.currentUser.uid ? 'sent' : 'received';\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `message ${messageClass}`,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_c2 = ChatMessage;\nexport default Chatroom;\nvar _c, _c2;\n$RefreshReg$(_c, \"Chatroom\");\n$RefreshReg$(_c2, \"ChatMessage\");","map":{"version":3,"names":["React","useRef","useState","auth","db","addDoc","collection","serverTimestamp","orderBy","query","limit","where","useCollectionData","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatroom","props","_s","chat_id","dummy","messagesRef","q","messages","formValue","setFormValue","sendMsg","e","preventDefault","uid","photoURL","currentUser","message","timestamp","sender_id","chatroom_id","current","scrollIntoView","behavior","length","console","log","children","map","msg","ChatMessage","fileName","_jsxFileName","lineNumber","columnNumber","ref","className","onSubmit","value","onChange","target","placeholder","type","disabled","_c","messageClass","_c2","$RefreshReg$"],"sources":["/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/components/SendMsg.js"],"sourcesContent":["\n\nimport React, { useRef, useState } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { addDoc, collection, serverTimestamp, orderBy, query, limit, where } from \"firebase/firestore\";\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nconst Chatroom = (props) => {\n    const chat_id = props.chat_id;\n    const dummy = useRef();\n    const messagesRef = collection(db, \"messages\");\n    \n    // Query for the 25 more recent messages in the current chatroom (requires the 2 filters because can't have where and orderBy in the same)\n    const q = query(messagesRef, where(\"chatroom_id\", \"==\", chat_id), orderBy(\"timestamp\"));\n    const [messages] = useCollectionData(q);\n\n    const [formValue, setFormValue] = useState('');\n\n    // Asynchronous function that will send messages using the value of the inputted text\n    const sendMsg = async(e) => {\n        e.preventDefault();\n        const {uid, photoURL} = auth.currentUser;\n        await addDoc(messagesRef, {\n            message: formValue,\n            timestamp: serverTimestamp(),\n            sender_id: uid,\n            chatroom_id: chat_id\n        })\n\n        setFormValue('');\n        dummy.current.scrollIntoView({ behavior: 'smooth'});\n    }\n    if (!messages || messages.length === 0) {\n        // Log a message or perform any necessary actions.\n        console.log(\"No messages found.\");\n      }\n    return (\n        <>\n        <main>\n            {messages && messages.map(msg => <ChatMessage key={msg.sender_id} message={msg}/>)}\n            <span ref={dummy}></span>\n        </main>\n        <form className=\"input_bar\" onSubmit={sendMsg}>\n            <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"hehe\"/>\n            <button type=\"submit\" disabled={!formValue}>send</button>\n        </form>          \n        </>\n    );\n\n}\n\n// Function for displaying the chat messages in the chatroom\nconst ChatMessage = (props) => {\n    // Grab the message text and sender's id for the message\n    const { message, sender_id } = props.message;\n    const messageClass = sender_id === auth.currentUser.uid ? 'sent' : 'received';\n\n    return (\n        <>\n            <div className={`message ${messageClass}`}>\n                <p>{message}</p>\n            </div>\n        </>\n    )\n}\n\nexport default Chatroom;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}