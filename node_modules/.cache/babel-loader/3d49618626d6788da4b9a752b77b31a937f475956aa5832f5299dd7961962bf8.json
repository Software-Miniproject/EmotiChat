{"ast":null,"code":"import _regeneratorRuntime from\"/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useRef,useState,useEffect}from\"react\";import{auth,db}from\"../firebase\";import{addDoc,collection,serverTimestamp,orderBy,query,limit,where,getDocs}from\"firebase/firestore\";import{useCollectionData}from'react-firebase-hooks/firestore';// To do: Beautify the chat bubbles, put in CSS for the submission form, add in user PFP\n// Function that displays messages associated with inputted chatroom and allows user to send messages in selected chatroom\nimport{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Chatroom=function Chatroom(props){var _ref;var chat_id=props.chat_id;var dummy=useRef();var messagesRef=collection(db,\"messages\");// Query for the 25 more recent messages in the current chatroom\nvar q=query(messagesRef,where(\"chatroom_id\",\"==\",chat_id),orderBy(\"timestamp\"),limit(25));var _useCollectionData=useCollectionData(q),_useCollectionData2=_slicedToArray(_useCollectionData,1),messages=_useCollectionData2[0];var _useState=useState(''),_useState2=_slicedToArray(_useState,2),formValue=_useState2[0],setFormValue=_useState2[1];// Asynchronous function that will send messages using the value of the inputted text, current user, and timestamp\nvar sendMsg=function sendMsg(_x){return(_ref=_ref||_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(e){var _auth$currentUser,uid,photoURL;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:if(!auth.currentUser){_context.next=5;break;}e.preventDefault();_auth$currentUser=auth.currentUser,uid=_auth$currentUser.uid,photoURL=_auth$currentUser.photoURL;_context.next=5;return addDoc(messagesRef,{message:formValue,timestamp:serverTimestamp(),sender_id:uid,chatroom_id:chat_id});case 5:setFormValue('');dummy.current.scrollIntoView({behavior:'smooth'});case 7:case\"end\":return _context.stop();}},_callee);}))).apply(this,arguments);};// If the user is logged in and there is a selected chatroom, display the messages and message handler\nif(auth.currentUser&&props.chat_id){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"chat_title\",children:/*#__PURE__*/_jsxs(\"h3\",{children:[\"Selected Chatroom: \",props.chat_id]})}),/*#__PURE__*/_jsx(\"div\",{id:\"hehe\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"messages_container\",children:[messages&&messages.map(function(msg){return/*#__PURE__*/_jsx(ChatMessage,{message:msg},msg.sender_id);}),/*#__PURE__*/_jsx(\"span\",{ref:dummy})]})}),/*#__PURE__*/_jsxs(\"form\",{className:\"input_bar\",onSubmit:sendMsg,children:[/*#__PURE__*/_jsx(\"input\",{value:formValue,onChange:function onChange(e){return setFormValue(e.target.value);},placeholder:\"Type a message...\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:!formValue,className:\"send-button\",children:\"Send!\"})]})]});}// Otherwise, display it as empty\nelse{return/*#__PURE__*/_jsx(\"div\",{});}};// Function for displaying the chat messages in the chatroom\nvar ChatMessage=function ChatMessage(props){var _ref2;// Grab the message text and sender's id for the message\nvar _props$message=props.message,message=_props$message.message,sender_id=_props$message.sender_id;var messageClass=sender_id===auth.currentUser.uid?'sent':'received';var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),username=_useState4[0],setUsername=_useState4[1];// Asynchronously gather the chatrooms under the current user\nvar getSenderInfo=function getSenderInfo(){return(_ref2=_ref2||_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var userRef,q,querySnapshot,userDoc,user;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:userRef=collection(db,\"users\");q=query(userRef,where(\"uid\",\"==\",sender_id));_context2.next=4;return getDocs(q);case 4:querySnapshot=_context2.sent;// If the query is successful (not empty), set the chatrooms to the chatrooms array associated with the user\nif(!querySnapshot.empty){userDoc=querySnapshot.docs[0];user=userDoc.data();setUsername(user.username);}else{setUsername(\"undefined\");}case 6:case\"end\":return _context2.stop();}},_callee2);}))).apply(this,arguments);};// Function that will getUserChatrooms when currentUser is changed\nuseEffect(function(){getSenderInfo();},[]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"username_\".concat(messageClass),children:/*#__PURE__*/_jsx(\"p\",{className:\"username\",children:username})}),/*#__PURE__*/_jsx(\"div\",{className:\"message_\".concat(messageClass),children:/*#__PURE__*/_jsx(\"p\",{className:\"message\",children:message})})]});};export default Chatroom;","map":{"version":3,"names":["React","useRef","useState","useEffect","auth","db","addDoc","collection","serverTimestamp","orderBy","query","limit","where","getDocs","useCollectionData","jsxs","_jsxs","jsx","_jsx","Fragment","_Fragment","Chatroom","props","_ref","chat_id","dummy","messagesRef","q","_useCollectionData","_useCollectionData2","_slicedToArray","messages","_useState","_useState2","formValue","setFormValue","sendMsg","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","_auth$currentUser","uid","photoURL","wrap","_callee$","_context","prev","next","currentUser","preventDefault","message","timestamp","sender_id","chatroom_id","current","scrollIntoView","behavior","stop","apply","arguments","children","className","id","map","msg","ChatMessage","ref","onSubmit","value","onChange","target","placeholder","type","disabled","_ref2","_props$message","messageClass","_useState3","_useState4","username","setUsername","getSenderInfo","_callee2","userRef","querySnapshot","userDoc","user","_callee2$","_context2","sent","empty","docs","data","concat"],"sources":["/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/components/Messages.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { addDoc, collection, serverTimestamp, orderBy, query, limit, where, getDocs } from \"firebase/firestore\";\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\n// To do: Beautify the chat bubbles, put in CSS for the submission form, add in user PFP\n\n// Function that displays messages associated with inputted chatroom and allows user to send messages in selected chatroom\nconst Chatroom = (props) => {\n\n    const chat_id = props.chat_id;\n    const dummy = useRef();\n    const messagesRef = collection(db, \"messages\");\n    \n    // Query for the 25 more recent messages in the current chatroom\n    const q = query(messagesRef, where(\"chatroom_id\", \"==\", chat_id), orderBy(\"timestamp\"), limit(25));\n    const [messages] = useCollectionData(q);\n\n    const [formValue, setFormValue] = useState('');\n\n    // Asynchronous function that will send messages using the value of the inputted text, current user, and timestamp\n    const sendMsg = async(e) => {\n        if (auth.currentUser) {\n            e.preventDefault();\n            const {uid, photoURL} = auth.currentUser;\n            await addDoc(messagesRef, {\n                message: formValue,\n                timestamp: serverTimestamp(),\n                sender_id: uid,\n                chatroom_id: chat_id\n            })\n        }\n\n        setFormValue('');\n        dummy.current.scrollIntoView({ behavior: 'smooth'});\n    }\n\n    // If the user is logged in and there is a selected chatroom, display the messages and message handler\n    if (auth.currentUser && props.chat_id) {\n        return (\n            <div>\n              <div className=\"chat_title\">\n                <h3>Selected Chatroom: {props.chat_id}</h3>\n              </div>\n              <div id=\"hehe\">\n                <div className=\"messages_container\">\n                  {messages && messages.map(msg => <ChatMessage key={msg.sender_id} message={msg}/>)}\n                  <span ref={dummy}></span>\n                </div>\n              </div>\n              <form className=\"input_bar\" onSubmit={sendMsg}>\n                <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"Type a message...\" />\n                <button type=\"submit\" disabled={!formValue} className=\"send-button\">Send!</button>\n              </form>\n            </div>\n          );\n          \n    }\n\n    \n    // Otherwise, display it as empty\n    else {\n        return (<div></div>)\n    }\n\n}\n\n// Function for displaying the chat messages in the chatroom\nconst ChatMessage = (props) => {\n    // Grab the message text and sender's id for the message\n    const { message, sender_id } = props.message;\n    const messageClass = sender_id === auth.currentUser.uid ? 'sent' : 'received';\n    const [username, setUsername] = useState('');\n\n    // Asynchronously gather the chatrooms under the current user\n    const getSenderInfo = async () => {\n        const userRef = collection(db, \"users\");\n        const q = query(userRef, where(\"uid\", \"==\", sender_id));\n        const querySnapshot = await getDocs(q);\n\n        // If the query is successful (not empty), set the chatrooms to the chatrooms array associated with the user\n        if (!querySnapshot.empty) {\n            const userDoc = querySnapshot.docs[0];\n            const user = userDoc.data();\n            setUsername(user.username);\n        }\n        else{\n            setUsername(\"undefined\");\n        }\n    }\n\n    // Function that will getUserChatrooms when currentUser is changed\n    useEffect(() => {\n        getSenderInfo();\n    }, []);\n\n    return (\n        <>\n            <div className={`username_${messageClass}`}>\n                <p className=\"username\">{username}</p>\n            </div>\n            <div className={`message_${messageClass}`}>\n                <p className=\"message\">{message}</p>\n            </div>\n\n        </>\n    )\n}\n\nexport default Chatroom;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}