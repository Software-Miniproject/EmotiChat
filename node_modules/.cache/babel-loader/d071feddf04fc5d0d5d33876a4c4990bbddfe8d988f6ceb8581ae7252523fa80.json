{"ast":null,"code":"var _jsxFileName = \"/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/components/Messages.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { addDoc, collection, serverTimestamp, orderBy, query, limit, where } from \"firebase/firestore\";\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\n// To do: Beautify the chat bubbles, put in CSS for the submission form, add in user PFP\n\n// Function that displays messages associated with inputted chatroom and allows user to send messages in selected chatroom\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chatroom = props => {\n  _s();\n  const chat_id = props.chat_id;\n  const dummy = useRef();\n  const messagesRef = collection(db, \"messages\");\n\n  // Query for the 25 more recent messages in the current chatroom\n  const q = query(messagesRef, where(\"chatroom_id\", \"==\", chat_id), orderBy(\"timestamp\"), limit(25));\n  const [messages] = useCollectionData(q);\n  const [formValue, setFormValue] = useState('');\n\n  // Asynchronous function that will send messages using the value of the inputted text, current user, and timestamp\n  const sendMsg = async e => {\n    if (auth.currentUser) {\n      e.preventDefault();\n      const {\n        uid,\n        photoURL\n      } = auth.currentUser;\n      await addDoc(messagesRef, {\n        message: formValue,\n        timestamp: serverTimestamp(),\n        sender_id: uid,\n        chatroom_id: chat_id\n      });\n    }\n    setFormValue('');\n    dummy.current.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n\n  // If the user is logged in and there is a selected chatroom, display the messages and message handler\n  if (auth.currentUser && props.chat_id) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right_section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages_container\",\n        children: [messages && messages.map(msg => /*#__PURE__*/_jsxDEV(ChatMessage, {\n          message: msg\n        }, msg.sender_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 54\n        }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n          ref: dummy\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"input_bar\",\n        onSubmit: sendMsg,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: formValue,\n          onChange: e => setFormValue(e.target.value),\n          placeholder: \"hehe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: !formValue,\n          children: \"send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this);\n  }\n  // Otherwise, display it as empty\n  else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this);\n  }\n};\n\n// Function for displaying the chat messages in the chatroom\n_s(Chatroom, \"NX0eAKMykrgqWBRdNpM7iVcnAm4=\", false, function () {\n  return [useCollectionData];\n});\n_c = Chatroom;\nconst ChatMessage = props => {\n  // Grab the message text and sender's id for the message\n  const {\n    message,\n    sender_id\n  } = props.message;\n  const messageClass = sender_id === auth.currentUser.uid ? 'sent' : 'received';\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `message ${messageClass}`,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_c2 = ChatMessage;\nexport default Chatroom;\nvar _c, _c2;\n$RefreshReg$(_c, \"Chatroom\");\n$RefreshReg$(_c2, \"ChatMessage\");","map":{"version":3,"names":["React","useRef","useState","auth","db","addDoc","collection","serverTimestamp","orderBy","query","limit","where","useCollectionData","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatroom","props","_s","chat_id","dummy","messagesRef","q","messages","formValue","setFormValue","sendMsg","e","currentUser","preventDefault","uid","photoURL","message","timestamp","sender_id","chatroom_id","current","scrollIntoView","behavior","className","children","map","msg","ChatMessage","fileName","_jsxFileName","lineNumber","columnNumber","ref","onSubmit","value","onChange","target","placeholder","type","disabled","_c","messageClass","user","_c2","$RefreshReg$"],"sources":["/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/components/Messages.js"],"sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { addDoc, collection, serverTimestamp, orderBy, query, limit, where } from \"firebase/firestore\";\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\n// To do: Beautify the chat bubbles, put in CSS for the submission form, add in user PFP\n\n// Function that displays messages associated with inputted chatroom and allows user to send messages in selected chatroom\nconst Chatroom = (props) => {\n\n    const chat_id = props.chat_id;\n    const dummy = useRef();\n    const messagesRef = collection(db, \"messages\");\n    \n    // Query for the 25 more recent messages in the current chatroom\n    const q = query(messagesRef, where(\"chatroom_id\", \"==\", chat_id), orderBy(\"timestamp\"), limit(25));\n    const [messages] = useCollectionData(q);\n\n    const [formValue, setFormValue] = useState('');\n\n    // Asynchronous function that will send messages using the value of the inputted text, current user, and timestamp\n    const sendMsg = async(e) => {\n        if (auth.currentUser) {\n            e.preventDefault();\n            const {uid, photoURL} = auth.currentUser;\n            await addDoc(messagesRef, {\n                message: formValue,\n                timestamp: serverTimestamp(),\n                sender_id: uid,\n                chatroom_id: chat_id\n            })\n        }\n\n        setFormValue('');\n        dummy.current.scrollIntoView({ behavior: 'smooth'});\n    }\n\n    // If the user is logged in and there is a selected chatroom, display the messages and message handler\n    if (auth.currentUser && props.chat_id) {\n        return (\n            <div className=\"right_section\">\n                <div className=\"messages_container\">\n                    {messages && messages.map(msg => <ChatMessage key={msg.sender_id} message={msg}/>)}\n                    <span ref={dummy}></span>\n                </div>\n                <form className=\"input_bar\" onSubmit={sendMsg}>\n                    <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"hehe\"/>\n                    <button type=\"submit\" disabled={!formValue}>send</button>\n                </form>       \n            </div>\n        );\n    }\n    // Otherwise, display it as empty\n    else {\n        return (<div></div>)\n    }\n\n}\n\n// Function for displaying the chat messages in the chatroom\nconst ChatMessage = (props) => {\n    // Grab the message text and sender's id for the message\n    const { message, sender_id } = props.message;\n    const messageClass = sender_id === auth.currentUser.uid ? 'sent' : 'received';\n\n    return (\n        <>\n            <div className={`message ${messageClass}`}>\n                <p>{user}</p>\n                <p>{message}</p>\n            </div>\n        </>\n    )\n}\n\nexport default Chatroom;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}