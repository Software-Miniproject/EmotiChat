{"ast":null,"code":"var _jsxFileName = \"/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/components/Messages.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { addDoc, collection, serverTimestamp, orderBy, query, limit, where, getDocs } from \"firebase/firestore\";\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\n// To do: Beautify the chat bubbles, put in CSS for the submission form, add in user PFP\n\n// Function that displays messages associated with inputted chatroom and allows user to send messages in selected chatroom\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chatroom = props => {\n  _s();\n  const chat_id = props.chat_id;\n  const dummy = useRef();\n  const messagesRef = collection(db, \"messages\");\n\n  // Query for the 25 more recent messages in the current chatroom\n  const q = query(messagesRef, where(\"chatroom_id\", \"==\", chat_id), orderBy(\"timestamp\"));\n  const [messages] = useCollectionData(q);\n  const [formValue, setFormValue] = useState('');\n  const chatRef = collection(db, \"chats\");\n  const chat_q = query(chatRef, where(\"id\", \"==\", props.chat_id));\n  const chat_info = useCollectionData(chat_q);\n  console.log(chat_info);\n\n  // Asynchronous function that will send messages using the value of the inputted text, current user, and timestamp\n  const sendMsg = async e => {\n    if (auth.currentUser) {\n      e.preventDefault();\n      const {\n        uid\n      } = auth.currentUser;\n      await addDoc(messagesRef, {\n        message: formValue,\n        timestamp: serverTimestamp(),\n        sender_id: uid,\n        chatroom_id: chat_id\n      });\n    }\n    setFormValue('');\n    dummy.current.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n\n  // If the user is logged in and there is a selected chatroom, display the messages and message handler\n  if (auth.currentUser && props.chat_id) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_title\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: chat_info.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"hehe\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages_container\",\n          children: [messages && messages.map(msg => /*#__PURE__*/_jsxDEV(ChatMessage, {\n            message: msg\n          }, msg.sender_id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 52\n          }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n            ref: dummy\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"input_bar\",\n        onSubmit: sendMsg,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: formValue,\n          onChange: e => setFormValue(e.target.value),\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: !formValue,\n          className: \"send-button\",\n          children: \"Send!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this);\n  }\n\n  // Otherwise, display it as empty\n  else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this);\n  }\n};\n\n// Function for displaying the chat messages in the chatroom\n_s(Chatroom, \"4kXsOXlyLY1DBnEjNDYaCVr/mgw=\", false, function () {\n  return [useCollectionData, useCollectionData];\n});\n_c = Chatroom;\nconst ChatMessage = props => {\n  _s2();\n  // Grab the message text and sender's id for the message\n  const {\n    message,\n    sender_id\n  } = props.message;\n  const messageClass = sender_id === auth.currentUser.uid ? 'sent' : 'received';\n  const [username, setUsername] = useState('');\n\n  // Asynchronously gather the chatrooms under the current user\n  const getSenderInfo = async () => {\n    const userRef = collection(db, \"users\");\n    const q = query(userRef, where(\"uid\", \"==\", sender_id));\n    const querySnapshot = await getDocs(q);\n\n    // If the query is successful (not empty), set the chatrooms to the chatrooms array associated with the user\n    if (!querySnapshot.empty) {\n      const userDoc = querySnapshot.docs[0];\n      const user = userDoc.data();\n      setUsername(user.username);\n    } else {\n      setUsername(\"undefined\");\n    }\n  };\n\n  // Function that will getUserChatrooms when currentUser is changed\n  useEffect(() => {\n    getSenderInfo();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `username_${messageClass}`,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"username\",\n        children: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `message_${messageClass}`,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s2(ChatMessage, \"vvPqiwmcocEAjsjiwnE6bJ+J4Yk=\");\n_c2 = ChatMessage;\nexport default Chatroom;\nvar _c, _c2;\n$RefreshReg$(_c, \"Chatroom\");\n$RefreshReg$(_c2, \"ChatMessage\");","map":{"version":3,"names":["React","useRef","useState","useEffect","auth","db","addDoc","collection","serverTimestamp","orderBy","query","limit","where","getDocs","useCollectionData","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatroom","props","_s","chat_id","dummy","messagesRef","q","messages","formValue","setFormValue","chatRef","chat_q","chat_info","console","log","sendMsg","e","currentUser","preventDefault","uid","message","timestamp","sender_id","chatroom_id","current","scrollIntoView","behavior","children","className","name","fileName","_jsxFileName","lineNumber","columnNumber","id","map","msg","ChatMessage","ref","onSubmit","value","onChange","target","placeholder","type","disabled","_c","_s2","messageClass","username","setUsername","getSenderInfo","userRef","querySnapshot","empty","userDoc","docs","user","data","_c2","$RefreshReg$"],"sources":["/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/components/Messages.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { addDoc, collection, serverTimestamp, orderBy, query, limit, where, getDocs } from \"firebase/firestore\";\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\n// To do: Beautify the chat bubbles, put in CSS for the submission form, add in user PFP\n\n// Function that displays messages associated with inputted chatroom and allows user to send messages in selected chatroom\nconst Chatroom = (props) => {\n\n    const chat_id = props.chat_id;\n    const dummy = useRef();\n    const messagesRef = collection(db, \"messages\");\n    \n    // Query for the 25 more recent messages in the current chatroom\n    const q = query(messagesRef, where(\"chatroom_id\", \"==\", chat_id), orderBy(\"timestamp\"));\n    const [messages] = useCollectionData(q);\n\n    const [formValue, setFormValue] = useState('');\n\n    const chatRef = collection(db, \"chats\");\n    const chat_q = query(chatRef, where(\"id\", \"==\", props.chat_id));\n    const chat_info = useCollectionData(chat_q);\n    console.log(chat_info);\n\n    // Asynchronous function that will send messages using the value of the inputted text, current user, and timestamp\n    const sendMsg = async(e) => {\n        if (auth.currentUser) {\n            e.preventDefault();\n            const {uid} = auth.currentUser;\n            await addDoc(messagesRef, {\n                message: formValue,\n                timestamp: serverTimestamp(),\n                sender_id: uid,\n                chatroom_id: chat_id\n            })\n        }\n\n        setFormValue('');\n        dummy.current.scrollIntoView({ behavior: 'smooth'});\n    }\n\n    // If the user is logged in and there is a selected chatroom, display the messages and message handler\n    if (auth.currentUser && props.chat_id) {\n        return (\n            <div>\n              <div className=\"chat_title\">\n                <h3>{chat_info.name}</h3>\n              </div>\n              <div id=\"hehe\">\n                <div className=\"messages_container\">\n                  {messages && messages.map(msg => <ChatMessage key={msg.sender_id} message={msg}/>)}\n                  <span ref={dummy}></span>\n                </div>\n              </div>\n              <form className=\"input_bar\" onSubmit={sendMsg}>\n                <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"Type a message...\" />\n                <button type=\"submit\" disabled={!formValue} className=\"send-button\">Send!</button>\n              </form>\n            </div>\n          );\n          \n    }\n\n    \n    // Otherwise, display it as empty\n    else {\n        return (<div></div>)\n    }\n\n}\n\n// Function for displaying the chat messages in the chatroom\nconst ChatMessage = (props) => {\n    // Grab the message text and sender's id for the message\n    const { message, sender_id } = props.message;\n    const messageClass = sender_id === auth.currentUser.uid ? 'sent' : 'received';\n    const [username, setUsername] = useState('');\n\n    // Asynchronously gather the chatrooms under the current user\n    const getSenderInfo = async () => {\n        const userRef = collection(db, \"users\");\n        const q = query(userRef, where(\"uid\", \"==\", sender_id));\n        const querySnapshot = await getDocs(q);\n\n        // If the query is successful (not empty), set the chatrooms to the chatrooms array associated with the user\n        if (!querySnapshot.empty) {\n            const userDoc = querySnapshot.docs[0];\n            const user = userDoc.data();\n            setUsername(user.username);\n        }\n        else{\n            setUsername(\"undefined\");\n        }\n    }\n\n    // Function that will getUserChatrooms when currentUser is changed\n    useEffect(() => {\n        getSenderInfo();\n    }, []);\n\n    return (\n        <>\n            <div className={`username_${messageClass}`}>\n                <p className=\"username\">{username}</p>\n            </div>\n            <div className={`message_${messageClass}`}>\n                <p className=\"message\">{message}</p>\n            </div>\n\n        </>\n    )\n}\n\nexport default Chatroom;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}