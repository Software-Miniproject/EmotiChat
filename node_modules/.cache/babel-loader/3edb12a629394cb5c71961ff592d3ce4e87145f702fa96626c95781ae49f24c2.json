{"ast":null,"code":"import { db } from '../firebase';\nimport { doc, setDoc, getDoc } from 'firebase/firestore';\n\n// Function to store user data in Firestore, checking for existing document\nexport const storeUserData = async (uid, email, displayName, photoURL) => {\n  try {\n    const userRef = doc(db, 'users', uid);\n\n    // Check if the document already exists\n    const userDoc = await getDoc(userRef);\n    if (!userDoc.exists()) {\n      // Extract the email prefix from the email\n      const emailPrefix = email.split('@')[0];\n\n      // Document doesn't exist, so create it with the email prefix as the username\n      await setDoc(userRef, {\n        email: email,\n        name: displayName,\n        uid: uid,\n        pfp: photoURL,\n        username: emailPrefix,\n        // Set the username to the email prefix\n        chatrooms: []\n      });\n      console.log('User data stored successfully');\n    } else {\n      // Document already exists, do nothing\n      console.log('User data already exists in Firestore');\n    }\n  } catch (error) {\n    console.error('Error storing user data:', error);\n  }\n};","map":{"version":3,"names":["db","doc","setDoc","getDoc","storeUserData","uid","email","displayName","photoURL","userRef","userDoc","exists","emailPrefix","split","name","pfp","username","chatrooms","console","log","error"],"sources":["/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/components/StoreUser.js"],"sourcesContent":["import { db } from '../firebase';\nimport { doc, setDoc, getDoc } from 'firebase/firestore';\n\n// Function to store user data in Firestore, checking for existing document\nexport const storeUserData = async (uid, email, displayName, photoURL) => {\n  try {\n    const userRef = doc(db, 'users', uid);\n\n    // Check if the document already exists\n    const userDoc = await getDoc(userRef);\n\n    if (!userDoc.exists()) {\n      // Extract the email prefix from the email\n      const emailPrefix = email.split('@')[0];\n\n      // Document doesn't exist, so create it with the email prefix as the username\n      await setDoc(userRef, {\n        email: email,\n        name: displayName,\n        uid: uid,\n        pfp: photoURL,\n        username: emailPrefix, // Set the username to the email prefix\n        chatrooms: []\n      });\n      console.log('User data stored successfully');\n    } else {\n      // Document already exists, do nothing\n      console.log('User data already exists in Firestore');\n    }\n  } catch (error) {\n    console.error('Error storing user data:', error);\n  }\n};\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,aAAa;AAChC,SAASC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;;AAExD;AACA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAOC,GAAG,EAAEC,KAAK,EAAEC,WAAW,EAAEC,QAAQ,KAAK;EACxE,IAAI;IACF,MAAMC,OAAO,GAAGR,GAAG,CAACD,EAAE,EAAE,OAAO,EAAEK,GAAG,CAAC;;IAErC;IACA,MAAMK,OAAO,GAAG,MAAMP,MAAM,CAACM,OAAO,CAAC;IAErC,IAAI,CAACC,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;MACrB;MACA,MAAMC,WAAW,GAAGN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;MAEvC;MACA,MAAMX,MAAM,CAACO,OAAO,EAAE;QACpBH,KAAK,EAAEA,KAAK;QACZQ,IAAI,EAAEP,WAAW;QACjBF,GAAG,EAAEA,GAAG;QACRU,GAAG,EAAEP,QAAQ;QACbQ,QAAQ,EAAEJ,WAAW;QAAE;QACvBK,SAAS,EAAE;MACb,CAAC,CAAC;MACFC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC9C,CAAC,MAAM;MACL;MACAD,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;IACtD;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;EAClD;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}