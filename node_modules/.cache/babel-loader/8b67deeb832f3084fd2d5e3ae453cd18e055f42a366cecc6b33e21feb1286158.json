{"ast":null,"code":"var _jsxFileName = \"/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/components/DisplayChatrooms.js\",\n  _s = $RefreshSig$();\nimport '../App.css';\nimport React, { useEffect, useState } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { getDocs, collection, query, where } from \"firebase/firestore\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport Chatroom from './Messages';\n\n// To do: Beautify the chat bubbles, put in CSS for the submission form, add in user PFP\n\n// Function that displays the chatrooms the logged in user has access to and sets the current chatroom to what the user clicks\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DisplayChatrooms = ({\n  setChatroom\n}) => {\n  _s();\n  // State setter and value for the chatrooms associated with current user\n  const [chatrooms, setChatrooms] = useState([]);\n\n  // Asynchronously gather the chatrooms under the current user\n  const getUserChatrooms = async () => {\n    // If there is a current user, query firestore \"users\" for the chatrooms associated with user that is currently logged in\n    if (auth.currentUser) {\n      const userRef = collection(db, \"users\");\n      const q = query(userRef, where(\"uid\", \"==\", auth.currentUser.uid));\n      const querySnapshot = await getDocs(q);\n\n      // If the query is successful (not empty), set the chatrooms to the chatrooms array associated with the user\n      if (!querySnapshot.empty) {\n        const userDoc = querySnapshot.docs[0];\n        const userChatrooms = userDoc.data().chatrooms || [];\n        setChatrooms(userChatrooms);\n      } else {\n        setChatrooms([]);\n      }\n    } else {\n      setChatrooms([]);\n    }\n  };\n  // Function that will getUserChatrooms when currentUser is changed\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      if (user) {\n        getUserChatrooms();\n      } else {\n        setChatrooms([]);\n      }\n    });\n    return () => unsubscribe();\n  }, []);\n\n  // Chatroom selection handler that sets chatroom for page and for what to display\n  const [selectedChatroom, setSelectedChatroom] = useState(\"\");\n  const handleSelectChatroom = chatroom => {\n    setChatroom(chatroom);\n    setSelectedChatroom(chatroom);\n  };\n\n  // Returns HTML code that displays buttons corresponding to the chatroom id's, if clicked it will set the chatroom to the selected one\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatrooms_container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Chatrooms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), chatrooms.map((chatroom, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSelectChatroom(chatroom),\n          children: chatroom\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this)\n      }, void 0, false))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right_section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_title\",\n        children: selectedChatroom && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Selected Chatroom: \", selectedChatroom]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Chatroom, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_s(DisplayChatrooms, \"pqHnmSzh01xvcZqUwQK3D8UuZw4=\");\n_c = DisplayChatrooms;\nexport default DisplayChatrooms;\nvar _c;\n$RefreshReg$(_c, \"DisplayChatrooms\");","map":{"version":3,"names":["React","useEffect","useState","auth","db","getDocs","collection","query","where","onAuthStateChanged","Chatroom","jsxDEV","_jsxDEV","Fragment","_Fragment","DisplayChatrooms","setChatroom","_s","chatrooms","setChatrooms","getUserChatrooms","currentUser","userRef","q","uid","querySnapshot","empty","userDoc","docs","userChatrooms","data","unsubscribe","user","selectedChatroom","setSelectedChatroom","handleSelectChatroom","chatroom","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","_c","$RefreshReg$"],"sources":["/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/components/DisplayChatrooms.js"],"sourcesContent":["import '../App.css';\nimport React, { useEffect, useState } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { getDocs, collection, query, where } from \"firebase/firestore\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport Chatroom from './Messages';\n\n// To do: Beautify the chat bubbles, put in CSS for the submission form, add in user PFP\n\n// Function that displays the chatrooms the logged in user has access to and sets the current chatroom to what the user clicks\nconst DisplayChatrooms = ({ setChatroom }) => {\n    // State setter and value for the chatrooms associated with current user\n    const [chatrooms, setChatrooms] = useState([]);\n    \n    // Asynchronously gather the chatrooms under the current user\n    const getUserChatrooms = async () => {\n        // If there is a current user, query firestore \"users\" for the chatrooms associated with user that is currently logged in\n        if (auth.currentUser) {\n            const userRef = collection(db, \"users\");\n            const q = query(userRef, where(\"uid\", \"==\", auth.currentUser.uid));\n            const querySnapshot = await getDocs(q);\n\n            // If the query is successful (not empty), set the chatrooms to the chatrooms array associated with the user\n            if (!querySnapshot.empty) {\n                const userDoc = querySnapshot.docs[0];\n                const userChatrooms = userDoc.data().chatrooms || [];\n                setChatrooms(userChatrooms);\n            }\n            else{\n                setChatrooms([]);\n            }\n        }\n        else {\n            setChatrooms([]);\n        }     \n    }\n    // Function that will getUserChatrooms when currentUser is changed\n    useEffect(() => {\n        const unsubscribe = onAuthStateChanged(auth, (user) => {\n            if (user) {\n                getUserChatrooms();\n            }\n            else {\n                setChatrooms([]);\n            }\n        });\n        return () => unsubscribe();\n    }, []);\n\n    // Chatroom selection handler that sets chatroom for page and for what to display\n    const [selectedChatroom, setSelectedChatroom] = useState(\"\");\n    const handleSelectChatroom = (chatroom) => {\n        setChatroom(chatroom);\n        setSelectedChatroom(chatroom);\n    }\n\n    // Returns HTML code that displays buttons corresponding to the chatroom id's, if clicked it will set the chatroom to the selected one\n    return (\n        <div className=\"home_container\">\n            <div className=\"chatrooms_container\">\n                <h3>Chatrooms</h3>\n                {chatrooms.map((chatroom, index) => (\n                    <>\n                        <button key={index} onClick={() => handleSelectChatroom(chatroom)}>\n                            {chatroom}\n                        </button>\n                    </>\n                ))}\n            </div>\n            <div className=\"right_section\">\n                <div className=\"chat_title\">\n                    {selectedChatroom && (\n                        <div>\n                            <h3>Selected Chatroom: {selectedChatroom}</h3>\n                        </div>\n                    )}\n                </div>\n                <div>\n                    < Chatroom/>\n                </div>\n            </div>\n        </div>\n        \n    );\n\n}\n\nexport default DisplayChatrooms;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}