{"ast":null,"code":"import _regeneratorRuntime from\"/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import'../App.css';import React,{useEffect,useState}from\"react\";import{auth,db}from\"../firebase\";import{getDocs,collection,query,where}from\"firebase/firestore\";import{onAuthStateChanged}from\"firebase/auth\";// To do: Beautify the chat bubbles, put in CSS for the submission form, add in user PFP\n// Function that displays the chatrooms the logged in user has access to and sets the current chatroom to what the user clicks\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var DisplayChatrooms=function DisplayChatrooms(_ref){var _ref2;var setChatroom=_ref.setChatroom;// State setter and value for the chatrooms associated with current user\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),chatrooms=_useState2[0],setChatrooms=_useState2[1];// Asynchronously gather the chatrooms under the current user\nvar getUserChatrooms=function getUserChatrooms(){return(_ref2=_ref2||_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var userRef,q,querySnapshot,userDoc,userChatrooms;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:if(!auth.currentUser){_context.next=9;break;}userRef=collection(db,\"users\");q=query(userRef,where(\"uid\",\"==\",auth.currentUser.uid));_context.next=5;return getDocs(q);case 5:querySnapshot=_context.sent;// If the query is successful (not empty), set the chatrooms to the chatrooms array associated with the user\nif(!querySnapshot.empty){userDoc=querySnapshot.docs[0];userChatrooms=userDoc.data().chatrooms||[];setChatrooms(userChatrooms);}else{setChatrooms([]);}_context.next=10;break;case 9:setChatrooms([]);case 10:case\"end\":return _context.stop();}},_callee);}))).apply(this,arguments);};// Function that will getUserChatrooms when currentUser is changed\nuseEffect(function(){var unsubscribe=onAuthStateChanged(auth,function(user){if(user){getUserChatrooms();}else{setChatrooms([]);}});return function(){return unsubscribe();};},[]);// Returns HTML code that displays buttons corresponding to the chatroom id's, if clicked it will set the chatroom to the selected one\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"chatrooms_container\",children:[/*#__PURE__*/_jsx(\"h3\",{style:{textAlign:'center'},children:\"Chatrooms\"}),chatrooms.map(function(chatroom,index){return/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return setChatroom(chatroom);},children:chatroom},index);})]});};export default DisplayChatrooms;","map":{"version":3,"names":["React","useEffect","useState","auth","db","getDocs","collection","query","where","onAuthStateChanged","jsx","_jsx","jsxs","_jsxs","DisplayChatrooms","_ref","_ref2","setChatroom","_useState","_useState2","_slicedToArray","chatrooms","setChatrooms","getUserChatrooms","_asyncToGenerator","_regeneratorRuntime","mark","_callee","userRef","q","querySnapshot","userDoc","userChatrooms","wrap","_callee$","_context","prev","next","currentUser","uid","sent","empty","docs","data","stop","apply","arguments","unsubscribe","user","className","children","style","textAlign","map","chatroom","index","onClick"],"sources":["/Users/trevorchan/Desktop/Senior Project/mini/EmotiChat/src/components/DisplayChatrooms.js"],"sourcesContent":["import '../App.css';\nimport React, { useEffect, useState } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { getDocs, collection, query, where } from \"firebase/firestore\";\nimport { onAuthStateChanged } from \"firebase/auth\";\n\n// To do: Beautify the chat bubbles, put in CSS for the submission form, add in user PFP\n\n// Function that displays the chatrooms the logged in user has access to and sets the current chatroom to what the user clicks\nconst DisplayChatrooms = ({ setChatroom }) => {\n    // State setter and value for the chatrooms associated with current user\n    const [chatrooms, setChatrooms] = useState([]);\n    \n    // Asynchronously gather the chatrooms under the current user\n    const getUserChatrooms = async () => {\n        // If there is a current user, query firestore \"users\" for the chatrooms associated with user that is currently logged in\n        if (auth.currentUser) {\n            const userRef = collection(db, \"users\");\n            const q = query(userRef, where(\"uid\", \"==\", auth.currentUser.uid));\n            const querySnapshot = await getDocs(q);\n\n            // If the query is successful (not empty), set the chatrooms to the chatrooms array associated with the user\n            if (!querySnapshot.empty) {\n                const userDoc = querySnapshot.docs[0];\n                const userChatrooms = userDoc.data().chatrooms || [];\n                setChatrooms(userChatrooms);\n            }\n            else{\n                setChatrooms([]);\n            }\n        }\n        else {\n            setChatrooms([]);\n        }     \n    }\n    // Function that will getUserChatrooms when currentUser is changed\n    useEffect(() => {\n        const unsubscribe = onAuthStateChanged(auth, (user) => {\n            if (user) {\n                getUserChatrooms();\n            }\n            else {\n                setChatrooms([]);\n            }\n        });\n        return () => unsubscribe();\n    }, []);\n\n\n    // Returns HTML code that displays buttons corresponding to the chatroom id's, if clicked it will set the chatroom to the selected one\n    return (\n        <div className=\"chatrooms_container\">\n          <h3 style={{ textAlign: 'center' }}>Chatrooms</h3>\n          {chatrooms.map((chatroom, index) => (\n            <button key={index} onClick={() => setChatroom(chatroom)}>\n              {chatroom}\n            </button>\n          ))}\n        </div>\n      );\n      \n\n}\n\nexport default DisplayChatrooms;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}